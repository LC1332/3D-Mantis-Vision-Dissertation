float depth_thresh = 100.0; // Threshold for SAFE distance (in cm)
cv::Mat mask, mean, stddev, mask2;

// Mask to segment regions with depth less than safe distance
cv::inRange(depth_map, 10, depth_thresh, mask);
double s = (cv::sum(mask)[0])/255.0;
double img_area = double(mask.rows * mask.cols);

std::vector<std::vector<cv::Point>> contours;
std::vector<cv::Vec4i> hierarchy;

// Check if a significantly large obstacle is present and filter out smaller noisy regions
if (s > 0.01*img_area)
{
  // finding conoturs in the generated mask
  cv::findContours(mask, contours, hierarchy, cv::RETR_TREE, cv::CHAIN_APPROX_SIMPLE);
  
  // sorting contours from largest to smallest
  std::sort(contours.begin(), contours.end(), compareContourAreas);

  // extracting the largest contour
  std::vector<cv::Point> cnt = contours[0];

  // Check if detected contour is significantly large (to avoid multiple tiny regions)
  double cnt_area = fabs( cv::contourArea(cv::Mat(cnt)));
  if (cnt_area > 0.01*img_area)
  {
    cv::Rect box;

    // Finding the bounding rectangle for the largest contour
    box = cv::boundingRect(cnt);

    // finding average depth of region represented by the largest contour
    mask2 = mask*0;
    cv::drawContours(mask2, contours, 0, (255), -1);

    // Calculating the average depth of the object closer than the safe distance
    cv::meanStdDev(depth_map, mean, stddev, mask2);

    // Printing the warning text with object distance
    char text[10];
    std::sprintf(text, "%.2f cm",mean.at<double>(0,0));

    cv::putText(output_canvas, "WARNING!", cv::Point2f(box.x + 5, box.y-40), 1, 2, cv::Scalar(0,0,255), 2, 2);
    cv::putText(output_canvas, "Object at", cv::Point2f(box.x + 5, box.y), 1, 2, cv::Scalar(0,0,255), 2, 2);
    cv::putText(output_canvas, text, cv::Point2f(box.x + 5, box.y+40), 1, 2, cv::Scalar(0,0,255), 2, 2);

  }
}
else
{
  // Printing SAFE if no obstacle is closer than the safe distance
  cv::putText(output_canvas, "SAFE!", cv::Point2f(200,200),1,2,cv::Scalar(0,255,0),2,2);
}

// Displaying the output of the obstacle avoidance system
cv::imshow("output_canvas",output_canvas);
